{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset238\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset238\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset238\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset0\fprq2 Times New Roman;}{\f35\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f37\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f38\froman\fcharset162\fprq2 Times New Roman Tur;}{\f39\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f40\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f41\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\fswiss\fcharset0\fprq2 Arial;}{\f43\fswiss\fcharset204\fprq2 Arial Cyr;}{\f45\fswiss\fcharset161\fprq2 Arial Greek;}{\f46\fswiss\fcharset162\fprq2 Arial Tur;}{\f47\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f48\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f49\fswiss\fcharset186\fprq2 Arial Baltic;}{\f52\fmodern\fcharset0\fprq1 Courier New;}{\f51\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f53\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f54\fmodern\fcharset162\fprq1 Courier New Tur;}{\f55\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f56\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f57\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \snext0 Normal;}
{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f1\fs24\lang1060\langfe1033\cgrid\langnp1060\langfenp1033 \sbasedon0 \snext15 Body Text;}}{\info
{\title The PixelDownSample method can be used to speed up the drawing of huge amounts of data (>> 2000 samples)}{\author Marjan Slatinek}{\operator Marjan Slatinek}{\creatim\yr2000\mo6\dy11\hr9\min1}{\revtim\yr2000\mo6\dy20\hr16\min54}{\version9}
{\edmins18}{\nofpages1}{\nofwords0}{\nofchars0}{\*\company Dew Research}{\nofcharsws0}{\vern8269}}\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1417 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow1\dgvshow1
\jexpand\viewkind5\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {
\f1\fs18\lang1060\langfe1033\langnp1060 This example shows you how to use TVec SliceIt method. SliceIt method allows you to group four calls to GetMem/FreeMem (or dynamic array SetLength/}{\b\f1\fs18\lang1060\langfe1033\langnp1060 nil}{
\f1\fs18\lang1060\langfe1033\langnp1060  )in to one. Normaly you would be calling GetMem(Aarray,Length*SizeOf(TSample)) four times, but with SliceIt, you will not be calling GetMe
m at all, because the vector might already have the memory available. Here is the code, used to allocate four AArrays :
\par 
\par }{\b\f2\fs18\lang1060\langfe1033\langnp1060 var}{\f2\fs18\lang1060\langfe1033\langnp1060      wm1,wm2,wm3,wm4: PSArray; \{pointers to array of TSample\}
\par \tab  Len : Integer;
\par         Vec: TVec;
\par }{\b\f2\fs18\lang1060\langfe1033\langnp1060 begin
\par \tab }{\f2\fs18\lang1060\langfe1033\langnp1060 CreateIt(vec);
\par        Len := 100;      \{number of elements per array\}
\par }\pard \ql \fi720\li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs18\lang1060\langfe1033\langnp1060 vec.SliceIt(Len,Len,Len,Len,
\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f2\fs18\lang1060\langfe1033\langnp1060                wm1,wm2,wm3,wm4);
\par        FreeIt(vec);
\par 
\par }{\b\f2\fs18\lang1060\langfe1033\langnp1060 end}{\f2\fs18\lang1060\langfe1033\langnp1060 ;
\par }{\f1\fs18\lang1060\langfe1033\langnp1060 
\par Zoom in on a chart (left-click and drag mouse over the chart) to see more details. 
\par Be aware that behind all mem
ory allocations is Delphi's memory manager that  then interfaces Windows memory manager. Getting reliable measurement results reflecting reallity can be a tricky thing. Try several different memory sizes making big jumps and rerun each test several times.
}{\f1\fs20 
\par }}